from typing import Final

from proschedio.composer import Provider, Url

URL_ACCOUNT: Final[Url] = Url(Provider.VULTR).uri("account")
URL_ACCOUNT_BANDWIDTH: Final[Url] = Url(Provider.VULTR).uri("account/bandwidth")

URL_APPLICATIONS: Final[Url] = Url(Provider.VULTR).uri("applications")

URL_BACKUPS: Final[Url] = Url(Provider.VULTR).uri("backups")
URL_BACKUPS_ID: Final[Url] = Url(Provider.VULTR).uri("backups/{backup-id}")

URL_BARE_METAL: Final[Url] = Url(Provider.VULTR).uri("bare-metals")
URL_BARE_METAL_ID: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}")
URL_BARE_METAL_IP4: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/ipv4")
URL_BARE_METAL_IP6: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/ipv6")
URL_BARE_METAL_IP4_REVERSE: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/ipv4/reverse")
URL_BARE_METAL_IP6_REVERSE: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/ipv6/reverse")
URL_BARE_METAL_IP4_REVERSE_DEFAULT: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/ipv4/reverse/default")
URL_BARE_METAL_IP6_REVERSE_IPV6: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/ipv6/reverse/{ipv6}")
URL_BARE_METAL_START: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/start")
URL_BARE_METAL_REBOOT: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/reboot")
URL_BARE_METAL_REINSTALL: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/reinstall")
URL_BARE_METAL_HALT: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/halt")
URL_BARE_METAL_BANDWIDTH: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/bandwidth")
URL_BARE_METALS_HALT: Final[Url] = Url(Provider.VULTR).uri("bare-metals/halt")
URL_BARE_METALS_REBOOT: Final[Url] = Url(Provider.VULTR).uri("bare-metals/reboot")
URL_BARE_METALS_START: Final[Url] = Url(Provider.VULTR).uri("bare-metals/start")
URL_BARE_METAL_USER_DATA: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/user-data")
URL_BARE_METALS_GET_AVAILABLE_UPGRADES: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/upgrades")
URL_BARE_METALS_GET_VNC: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/vnc")
URL_BARE_METALS_ATTACH_VPC_TO_INSTANCE: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/vpcs/attach")
URL_BARE_METALS_DETACH_VPC_FROM_INSTANCE: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/vpcs/detach")
URL_BARE_METALS_LIST_VPCS: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/vpcs")
URL_BARE_METALS_ATTACH_VPC2_TO_INSTANCE: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/vpc2/attach")
URL_BARE_METALS_DETACH_VPC2_FROM_INSTANCE: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/vpc2/detach")
URL_BARE_METALS_LIST_VPCS2: Final[Url] = Url(Provider.VULTR).uri("bare-metals/{baremetal-id}/vpc2")

URL_BILLING_LIST_HISTORY: Final[Url] = Url(Provider.VULTR).uri("billing/history")
URL_BILLING_LIST_INVOICES: Final[Url] = Url(Provider.VULTR).uri("billing/invoices")
URL_BILLING_GET_INVOICE: Final[Url] = Url(Provider.VULTR).uri("billing/invoices/{invoice-id}")
URL_BILLING_GET_INVOICE_ITEMS: Final[Url] = Url(Provider.VULTR).uri("billing/invoices/{invoice-id}/items")
URL_BILLING_LIST_PENDING_CHARGES: Final[Url] = Url(Provider.VULTR).uri("billing/pending-charges")

URL_BLOCK_STORAGE: Final[Url] = Url(Provider.VULTR).uri("blocks")
URL_BLOCK_STORAGE_ID: Final[Url] = Url(Provider.VULTR).uri("blocks/{block-id}")
URL_BLOCK_STORAGE_ATTACH: Final[Url] = Url(Provider.VULTR).uri("blocks/{block-id}/attach")
URL_BLOCK_STORAGE_DETACH: Final[Url] = Url(Provider.VULTR).uri("blocks/{block-id}/detach")

URL_CDN_LIST_PULL_ZONES: Final[Url] = Url(Provider.VULTR).uri("cdns/pull-zones")
URL_CDN_GET_PULL_ZONE: Final[Url] = Url(Provider.VULTR).uri("cdns/pull-zones/{pullzone-id}")
URL_CDN_PURGE_PULL_ZONE: Final[Url] = Url(Provider.VULTR).uri("cdns/pull-zones/{pullzone-id}/purge")
URL_CDN_LIST_PUSH_ZONES: Final[Url] = Url(Provider.VULTR).uri("cdns/push-zones")
URL_CDN_GET_PUSH_ZONE: Final[Url] = Url(Provider.VULTR).uri("cdns/push-zones/{pushzone-id}")
URL_CDN_LIST_PUSH_ZONE_FILES: Final[Url] = Url(Provider.VULTR).uri("cdns/push-zones/{pushzone-id}/files")
URL_CDN_DELETE_PUSH_ZONE_FILE: Final[Url] = Url(Provider.VULTR).uri("cdns/push-zones/{pushzone-id}/files/{file-name}")

URL_CONTAINER_LIST: Final[Url] = Url(Provider.VULTR).uri("registries")
URL_CONTAINER: Final[Url] = Url(Provider.VULTR).uri("registry")
URL_CONTAINER_ID: Final[Url] = Url(Provider.VULTR).uri("registry/{registry-id}")
URL_CONTAINER_REPOSITORY: Final[Url] = Url(Provider.VULTR).uri("registry/{registry-id}/repositories")
URL_CONTAINER_REPOSITORY_IMAGE: Final[Url] = Url(Provider.VULTR).uri("registry/{registry-id}/repository/{repository-image}")
URL_CONTAINER_DOCKER_CREDENTIALS: Final[Url] = Url(Provider.VULTR).uri("registry/{registry-id}/docker-credentials") #query params
URL_CONTAINER_KUBERNETES_DOCKER_CREDENTIALS: Final[Url] = Url(Provider.VULTR).uri("registry/{registry-id}/docker-credentials/kubernetes") #query params
URL_CONTAINER_ROBOTS: Final[Url] = Url(Provider.VULTR).uri("registry/{registry-id}/robots")
URL_CONTAINER_ROBOT: Final[Url] = Url(Provider.VULTR).uri("registry/{registry-id}/robot/{robot-name}")
URL_CONTAINER_ARTIFACTS: Final[Url] = Url(Provider.VULTR).uri("registry/{registry-id}/repository/{repository-image}/artifacts")
URL_CONTAINER_ARTIFACT: Final[Url] = Url(Provider.VULTR).uri("registry/{registry-id}/repository/{repository-image}/artifact/{artifact-digest}")
URL_CONTAINER_LIST_REGIONS: Final[Url] = Url(Provider.VULTR).uri("registry/region/list")
URL_CONTAINER_LIST_PLANS: Final[Url] = Url(Provider.VULTR).uri("registry/plan/list")

URL_DATABASE_LIST_PLANS: Final[Url] = Url(Provider.VULTR).uri("databases/plans")
URL_DATABASE_LIST: Final[Url] = Url(Provider.VULTR).uri("databases")
URL_DATABASE_CREATE: Final[Url] = Url(Provider.VULTR).uri("databases")
URL_DATABASE_GET: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}")
URL_DATABASE_USAGE: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/usage")
URL_DATABASE_USERS: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/users")
URL_DATABASE_USER: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/users/{username}")
URL_DATABASE_USER_ACCESS_CONTROL: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/users/{username}/access-control")
URL_DATABASE_LOGICAL_DATABASES: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/dbs")
URL_DATABASE_LOGICAL_DATABASE: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/dbs/{db-name}")
URL_DATABASE_TOPICS: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/topics")
URL_DATABASE_TOPIC: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/topics/{topic-name}")
URL_DATABASE_QUOTAS: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/quotas")
URL_DATABASE_QUOTA: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/quotas/{client-id}/{username}")
URL_DATABASE_MAINTENANCE: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/maintenance")
URL_DATABASE_ALERTS: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/alerts")
URL_DATABASE_MIGRATION: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/migration")
URL_DATABASE_READ_REPLICA: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/read-replica")
URL_DATABASE_PROMOTE_READ_REPLICA: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/promote-read-replica")
URL_DATABASE_BACKUP_INFORMATION: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/backups")
URL_DATABASE_RESTORE_FROM_BACKUP: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/restore")
URL_DATABASE_FORK: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/fork")
URL_DATABASE_CONNECTION_POOLS: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/connection-pools")
URL_DATABASE_CONNECTION_POOL: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/connection-pools/{pool-name}")
URL_DATABASE_ADVANCED_OPTIONS: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/advanced-options")
URL_DATABASE_AVAILABLE_VERSIONS: Final[Url] = Url(Provider.VULTR).uri("databases/{database-id}/version-upgrade")

URL_DOMAIN_LIST: Final[Url] = Url(Provider.VULTR).uri("domains")
URL_DOMAIN: Final[Url] = Url(Provider.VULTR).uri("domains/{dns-domain}")
URL_DOMAIN_SOA: Final[Url] = Url(Provider.VULTR).uri("domains/{dns-domain}/soa")
URL_DOMAIN_DNSSEC: Final[Url] = Url(Provider.VULTR).uri("domains/{dns-domain}/dnssec")
URL_DOMAIN_RECORDS: Final[Url] = Url(Provider.VULTR).uri("domains/{dns-domain}/records")
URL_DOMAIN_RECORD: Final[Url] = Url(Provider.VULTR).uri("domains/{dns-domain}/records/{record-id}")

URL_FIREWALL_GROUP_LIST: Final[Url] = Url(Provider.VULTR).uri("firewalls")
URL_FIREWALL_GROUP_CREATE: Final[Url] = Url(Provider.VULTR).uri("firewalls")
URL_FIREWALL_GROUP_GET: Final[Url] = Url(Provider.VULTR).uri("firewalls/{firewall-group-id}")
URL_FIREWALL_GROUP_RULES: Final[Url] = Url(Provider.VULTR).uri("firewalls/{firewall-group-id}/rules")
URL_FIREWALL_GROUP_RULE: Final[Url] = Url(Provider.VULTR).uri("firewalls/{firewall-group-id}/rules/{firewall-rule-id}")

URL_INFERENCE_LIST: Final[Url] = Url(Provider.VULTR).uri("inference")
URL_INFERENCE_CREATE: Final[Url] = Url(Provider.VULTR).uri("inference")
URL_INFERENCE_GET: Final[Url] = Url(Provider.VULTR).uri("inference/{inference-id}")
URL_INFERENCE_USAGE: Final[Url] = Url(Provider.VULTR).uri("inference/{inference-id}/usage")

URL_INSTANCE_LIST: Final[Url] = Url(Provider.VULTR).uri("instances")
URL_INSTANCE_CREATE: Final[Url] = Url(Provider.VULTR).uri("instances")
URL_INSTANCE_GET: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}")
URL_INSTANCE_REINSTALL: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/reinstall")
URL_INSTANCE_BANDWIDTH: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/bandwidth")
URL_INSTANCE_NEIGHBORS: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/neighbors")
URL_INSTANCE_PRIVATE_NETWORKS: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/private-networks")
URL_INSTANCE_VPCS: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/vpcs")
URL_INSTANCE_VPC2S: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/vpc2")
URL_INSTANCE_ISO: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/iso")
URL_INSTANCE_ISO_ATTACH: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/iso/attach")
URL_INSTANCE_ISO_DETACH: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/iso/detach")
URL_INSTANCE_PRIVATE_NETWORKS_ATTACH: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/private-networks/attach")
URL_INSTANCE_PRIVATE_NETWORKS_DETACH: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/private-networks/detach")
URL_INSTANCE_VPCS_ATTACH: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/vpcs/attach")
URL_INSTANCE_VPCS_DETACH: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/vpcs/detach")
URL_INSTANCE_VPC2_ATTACH: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/vpc2/attach")
URL_INSTANCE_VPC2_DETACH: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/vpc2/detach")
URL_INSTANCE_IP4: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/ipv4")
URL_INSTANCE_IP6: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/ipv6")
URL_INSTANCE_IP4_REVERSE: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/ipv4/reverse")
URL_INSTANCE_IP6_REVERSE: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/ipv6/reverse")
URL_INSTANCE_IP4_REVERSE_DEFAULT: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/ipv4/reverse/default")
URL_INSTANCE_IP6_REVERSE_IPV6: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/ipv6/reverse/{ipv6}")
URL_INSTANCE_START: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/start")
URL_INSTANCE_REBOOT: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/reboot")
URL_INSTANCE_HALT: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/halt")
URL_INSTANCE_USER_DATA: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/user-data")
URL_INSTANCES_HALT: Final[Url] = Url(Provider.VULTR).uri("instances/halt")
URL_INSTANCES_REBOOT: Final[Url] = Url(Provider.VULTR).uri("instances/reboot")
URL_INSTANCES_START: Final[Url] = Url(Provider.VULTR).uri("instances/start")
URL_INSTANCE_UPGRADES: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/upgrades")
URL_INSTANCE_BACKUP_SCHEDULE: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/backup-schedule")
URL_INSTANCE_RESTORE: Final[Url] = Url(Provider.VULTR).uri("instances/{instance-id}/restore")

URL_ISO: Final[Url] = Url(Provider.VULTR).uri("iso")
URL_ISO_ID: Final[Url] = Url(Provider.VULTR).uri("iso/{iso-id}")
URL_ISO_PUBLIC: Final[Url] = Url(Provider.VULTR).uri("iso-public")

URL_KUBERNETES_LIST: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters")
URL_KUBERNETES_CREATE: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters")
URL_KUBERNETES_GET: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters/{vke-id}")
URL_KUBERNETES_UPDATE: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters/{vke-id}")
URL_KUBERNETES_DELETE: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters/{vke-id}")
URL_KUBERNETES_DELETE_WITH_LINKED_RESOURCES: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters/{vke-id}/delete-with-linked-resources")
URL_KUBERNETES_RESOURCES: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters/{vke-id}/resources")
URL_KUBERNETES_AVAILABLE_UPGRADES: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters/{vke-id}/available-upgrades")
URL_KUBERNETES_UPGRADES: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters/{vke-id}/upgrades")
URL_KUBERNETES_NODEPOOLS: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters/{vke-id}/node-pools")
URL_KUBERNETES_NODEPOOL: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters/{vke-id}/node-pools/{nodepool-id}")
URL_KUBERNETES_NODEPOOL_INSTANCE: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters/{vke-id}/node-pools/{nodepool-id}/nodes/{node-id}")
URL_KUBERNETES_NODEPOOL_INSTANCE_RECYCLE: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters/{vke-id}/node-pools/{nodepool-id}/nodes/{node-id}/recycle")
URL_KUBERNETES_CONFIG: Final[Url] = Url(Provider.VULTR).uri("kubernetes/clusters/{vke-id}/config")
URL_KUBERNETES_VERSIONS: Final[Url] = Url(Provider.VULTR).uri("kubernetes/versions")

URL_LOAD_BALANCER_LIST: Final[Url] = Url(Provider.VULTR).uri("load-balancers")
URL_LOAD_BALANCER_CREATE: Final[Url] = Url(Provider.VULTR).uri("load-balancers")
URL_LOAD_BALANCER_GET: Final[Url] = Url(Provider.VULTR).uri("load-balancers/{load-balancer-id}")
URL_LOAD_BALANCER_SSL: Final[Url] = Url(Provider.VULTR).uri("load-balancers/{load-balancer-id}/ssl")
URL_LOAD_BALANCER_AUTO_SSL: Final[Url] = Url(Provider.VULTR).uri("load-balancers/{load-balancer-id}/auto_ssl")
URL_LOAD_BALANCER_FORWARDING_RULES: Final[Url] = Url(Provider.VULTR).uri("load-balancers/{load-balancer-id}/forwarding-rules")
URL_LOAD_BALANCER_FORWARDING_RULE: Final[Url] = Url(Provider.VULTR).uri("load-balancers/{load-balancer-id}/forwarding-rules/{forwarding-rule-id}")
URL_LOAD_BALANCER_FIREWALL_RULES: Final[Url] = Url(Provider.VULTR).uri("load-balancers/{loadbalancer-id}/firewall-rules")
URL_LOAD_BALANCER_FIREWALL_RULE: Final[Url] = Url(Provider.VULTR).uri("load-balancers/{loadbalancer-id}/firewall-rules/{firewall-rule-id}")

URL_MARKET_PLACE_APP_VARIABLE: Final[Url] = Url(Provider.VULTR).uri("marketplace/apps/{image-id}/variables")

URL_NETWORK_LIST: Final[Url] = Url(Provider.VULTR).uri("private-networks")
URL_NETWORK_GET: Final[Url] = Url(Provider.VULTR).uri("private-networks/{network-id}")

URL_OS: Final[Url] = Url(Provider.VULTR).uri("os")

URL_PLAN: Final[Url] = Url(Provider.VULTR).uri("plans")
URL_PLAN_METAL: Final[Url] = Url(Provider.VULTR).uri("plans-metal")

URL_REGION: Final[Url] = Url(Provider.VULTR).uri("regions")
URL_REGION_ID_AVAILABLE: Final[Url] = Url(Provider.VULTR).uri("regions/{region-id}/availability")

URL_RESERVED_IP: Final[Url] = Url(Provider.VULTR).uri("reserved-ips")
URL_RESERVED_IP_ID: Final[Url] = Url(Provider.VULTR).uri("reserved-ips/{reserved-ip}")
URL_RESERVED_IP_ATTACH: Final[Url] = Url(Provider.VULTR).uri("reserved-ips/{reserved-ip}/attach")
URL_RESERVED_IP_DETACH: Final[Url] = Url(Provider.VULTR).uri("reserved-ips/{reserved-ip}/detach")
URL_RESERVED_IP_CONVERT: Final[Url] = Url(Provider.VULTR).uri("reserved-ips/convert")

URL_SNAPSHOT: Final[Url] = Url(Provider.VULTR).uri("snapshots")
URL_SNAPSHOT_ID: Final[Url] = Url(Provider.VULTR).uri("snapshots/{snapshot-id}")
URL_SNAPSHOT_CREATE_FROM_URL: Final[Url] = Url(Provider.VULTR).uri("snapshots/create-from-url")

URL_SSH_KEY_LIST: Final[Url] = Url(Provider.VULTR).uri("ssh-keys")
URL_SSH_KEY: Final[Url] = Url(Provider.VULTR).uri("ssh-keys/{ssh-key-id}")

URL_STARTUP_SCRIPT_LIST: Final[Url] = Url(Provider.VULTR).uri("startup-scripts")
URL_STARTUP_SCRIPT: Final[Url] = Url(Provider.VULTR).uri("startup-scripts/{startup-id}")

URL_SUB_ACCOUNT_LIST: Final[Url] = Url(Provider.VULTR).uri("subaccounts")
URL_SUB_ACCOUNT_CREATE: Final[Url] = Url(Provider.VULTR).uri("subaccounts")

URL_USER_LIST: Final[Url] = Url(Provider.VULTR).uri("users")
URL_USER: Final[Url] = Url(Provider.VULTR).uri("users/{user-id}")

URL_VPC_LIST: Final[Url] = Url(Provider.VULTR).uri("vpcs")
URL_VPC_GET: Final[Url] = Url(Provider.VULTR).uri("vpcs/{vpc-id}")

URL_VPC2_LIST: Final[Url] = Url(Provider.VULTR).uri("vpc2")
URL_VPC2_GET: Final[Url] = Url(Provider.VULTR).uri("vpc2/{vpc-id}")
URL_VPC2_NODES: Final[Url] = Url(Provider.VULTR).uri("vpc2/{vpc-id}/nodes")
URL_VPC2_ATTACH_NODES: Final[Url] = Url(Provider.VULTR).uri("vpc2/{vpc-id}/nodes/attach")
URL_VPC2_DETACH_NODES: Final[Url] = Url(Provider.VULTR).uri("vpc2/{vpc-id}/nodes/detach")

URL_VFS_REGIONS: Final[Url] = Url(Provider.VULTR).uri("vfs/regions")
URL_VFS_LIST: Final[Url] = Url(Provider.VULTR).uri("vfs")
URL_VFS_CREATE: Final[Url] = Url(Provider.VULTR).uri("vfs")
URL_VFS_GET: Final[Url] = Url(Provider.VULTR).uri("vfs/{vfs_id}")
URL_VFS_ATTACHMENTS: Final[Url] = Url(Provider.VULTR).uri("vfs/{vfs_id}/attachments")
URL_VFS_ATTACHMENT: Final[Url] = Url(Provider.VULTR).uri("vfs/{vfs_id}/attachments/{vps_id}")